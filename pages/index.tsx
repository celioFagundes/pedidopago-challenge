import type { GetServerSideProps } from 'next'
import Head from 'next/head'
import axios from 'axios'
import { useEffect, useState } from 'react'
import Table from '../components/TestTable'
import { BsThreeDotsVertical } from 'react-icons/bs'
import Layout from '../components/Layout'
import {
  BottomContainer,
  Container,
  Content,
  DropdownActionLabel,
  DropdownIcon,
  DropdownItemData,
  DropdownLabel,
  ListTitle,
  ModalBackground,
  ModalButton,
  ModalMenu,
  ModalOption,
  ModalOptionIcon,
  ModalOptionLink,
  PageTitle,
  Tab,
  Tabs,
  Wrapper,
} from '../styles/styles-test'
import Link from 'next/link'
import { useRouter } from 'next/router'
import SearchInput from '../components/SearchInput'
import SelectQuantity from '../components/Select'
import Pagination from '../components/Pagination'
import { AiOutlineEye, AiOutlineFileAdd } from 'react-icons/ai'
import { RiDeleteBinLine } from 'react-icons/ri'
import SelectModal from '../components/SelectModal'
import { MdOutlineKeyboardArrowDown, MdOutlineKeyboardArrowUp } from 'react-icons/md'
import Image from 'next/image'
import { ActionsContainer, DotsIcon } from '../styles/styles-test'
interface Agent {
  agent_id: number
  name: string
  image: string
  department: string
  branch: string
  role: string
  status: string
}
interface MainProps {
  data: [Agent]
}

interface IsOpenList {
  [key: number]: boolean
}
const Home: React.FC<MainProps> = ({ data }) => {
  const [displayData, setDisplayData] = useState(data)
  const [modalIsOpenList, setModalIsOpenList] = useState<IsOpenList>({})
  const [dropdownIsOpenList, setDropdownIsOpenList] = useState<IsOpenList>({})
  const [modalCategoriesIsOpen, setModalCategoriesIsOpen] = useState(false)
  const router = useRouter()

  useEffect(() => {
    const isOpenList = displayData.reduce((prev, curr) => {
      return { ...prev, [curr.agent_id]: false }
    }, {})
    setModalIsOpenList(isOpenList)
    setDropdownIsOpenList(isOpenList)
  }, [displayData])

  const toggleModal = (id: number) => {
    let newList = { ...modalIsOpenList }
    Object.keys(newList).forEach(item => (newList[Number(item)] = false))
    newList[id] = true
    setModalIsOpenList(newList)
  }
  const toggleDropdown = (id: number) => {
    let newList = { ...dropdownIsOpenList }
    if (newList[id]) {
      Object.keys(newList).forEach(item => (newList[Number(item)] = false))
    } else {
      Object.keys(newList).forEach(item => (newList[Number(item)] = false))
      newList[id] = !newList[id]
    }
    setDropdownIsOpenList(newList)
  }
  const anyModalOpen = () => {
    let isOpen = false
    Object.keys(modalIsOpenList).forEach(item => {
      if (modalIsOpenList[Number(item)]) {
        isOpen = true
      }
    })
    return isOpen
  }
  const closeModal = () => {
    if (anyModalOpen()) {
      let newList = { ...modalIsOpenList }
      Object.keys(newList).forEach(item => (newList[Number(item)] = false))
      setModalIsOpenList(newList)
    }
  }
  return (
    <div style={{ width: '100%' }}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Layout>
        <Wrapper onClick={closeModal}>
          <Container>
            <PageTitle>Organização</PageTitle>
            <Content>
              <Tabs>
                <Link href='/'>
                  <Tab isActive={router.pathname === '/'}>Colaboradores</Tab>
                </Link>
                <Link href='/cargos'>
                  <Tab isActive={router.pathname !== '/'}>Cargos</Tab>
                </Link>
              </Tabs>
              <SelectModal
                isOpen={modalCategoriesIsOpen}
                openFn={() => setModalCategoriesIsOpen(true)}
                closeFn={() => setModalCategoriesIsOpen(false)}
                label={'Colaboradores'}
              />
              <SearchInput />
              <ListTitle>Listagem de colaboradores</ListTitle>
              {data && (
                <Table>
                  <Table.Header>
                    <Table.Row>
                      <Table.Th>Nome Completo</Table.Th>
                      <Table.Th>Departamento</Table.Th>
                      <Table.Th>Cargo</Table.Th>
                      <Table.Th>Unidade</Table.Th>
                      <Table.Th>Status</Table.Th>
                      <Table.Th></Table.Th>
                    </Table.Row>
                  </Table.Header>
                  <Table.Body>
                    {data.map(
                      agent =>
                        agent.agent_id !== 15 && (
                          <Table.Row
                            key={agent.agent_id}
                            isActive={dropdownIsOpenList[agent.agent_id]}
                            maxHeight={'90px'}
                          >
                            <Table.Td
                              status={agent.status}
                              onClick={() => toggleDropdown(agent.agent_id)}
                            >
                              <DropdownLabel>Nome Completo</DropdownLabel>
                              <Table.AvatarAndName url={agent.image} name={agent.name} />
                              <DropdownIcon>
                                {!dropdownIsOpenList[agent.agent_id] ? (
                                  <MdOutlineKeyboardArrowDown />
                                ) : (
                                  <MdOutlineKeyboardArrowUp />
                                )}
                              </DropdownIcon>
                            </Table.Td>
                            <Table.Td status={agent.status}>
                              <DropdownLabel>Departamento</DropdownLabel>
                              <DropdownItemData>{agent.department}</DropdownItemData>
                            </Table.Td>
                            <Table.Td status={agent.status}>
                              <DropdownLabel>Cargo</DropdownLabel>
                              <DropdownItemData>{agent.role}</DropdownItemData>
                            </Table.Td>
                            <Table.Td status={agent.status}>
                              <DropdownLabel>Unidade</DropdownLabel>
                              <DropdownItemData>{agent.branch}</DropdownItemData>
                            </Table.Td>
                            <Table.Td>
                              <DropdownLabel>Status</DropdownLabel>
                              <Table.Status status={agent.status}>
                                {agent.status === 'active' ? 'Ativo' : 'Inativo'}
                              </Table.Status>
                            </Table.Td>
                            <Table.Td>
                              <ModalButton onClick={() => toggleModal(agent.agent_id)}>
                                <DotsIcon>
                                  <BsThreeDotsVertical size={16} />
                                </DotsIcon>
                                <ActionsContainer>
                                  <AiOutlineFileAdd size={24} color='#1DD195' />
                                  <DropdownActionLabel>Ações</DropdownActionLabel>
                                </ActionsContainer>
                              </ModalButton>
                              <>
                                <ModalBackground isOpen={modalIsOpenList[agent.agent_id]} />
                                <ModalMenu isOpen={modalIsOpenList[agent.agent_id]}>
                                  <Link href={`/colaborador/${agent.agent_id}`}>
                                    <ModalOption>
                                      <ModalOptionIcon>
                                        <AiOutlineEye size={22} />
                                      </ModalOptionIcon>

                                      <ModalOptionLink isActive={true}>
                                        Ver colaborador
                                      </ModalOptionLink>
                                    </ModalOption>
                                  </Link>
                                  <Link href='#'>
                                    <ModalOption>
                                      <ModalOptionIcon>
                                        <RiDeleteBinLine size={22} />
                                      </ModalOptionIcon>
                                      <ModalOptionLink isActive={false}>Excluir</ModalOptionLink>
                                    </ModalOption>
                                  </Link>
                                </ModalMenu>
                              </>
                            </Table.Td>
                          </Table.Row>
                        )
                    )}
                  </Table.Body>
                </Table>
              )}
              <BottomContainer>
                <SelectQuantity />
                <Pagination />
              </BottomContainer>
            </Content>
          </Container>
        </Wrapper>
      </Layout>
    </div>
  )
}

export const getServerSideProps: GetServerSideProps = async context => {
  const { data } = await axios.get('https://pp-api-desafio.herokuapp.com/agents')
  return {
    props: {
      data: data.items,
    },
  }
}

export default Home
